try:
    import tomllib
except ModuleNotFoundError:
    import tomli as tomllib

import tomli_w
import requests

with open("config.toml", "rb") as f:
    config = tomllib.load(f)
NAME = config["name"].lower()
print(f"Generating `{NAME}.toml` ...")

base_url = config["base_url"]

presets_list = config["presets"]

generated = {
    "name": NAME,
    "url": config["url"],
    "support": config["support"],
    "repo": config["repo"],
    "maintainer": config["maintainer"]
}
print("The following presets will be added to the repo:")
presets = {}
for preset in presets_list:
    name = preset
    raw_url = base_url.format(name=preset)
    try:
        r = requests.get(raw_url, timeout=5)
        r.raise_for_status()
    except requests.exceptions.HTTPError as e:
        print(f"  x {name}: {e}")
    else:
        online_preset = tomllib.loads(r.text)
        preset = {
            "raw": raw_url,
            "name": online_preset["name"],
            "badges": online_preset["badges"],
            "description": online_preset["description"],
            "maintainer": online_preset["maintainer"]
        }

        presets[name] = preset
        print("  -", name)

generated["presets"] = presets

gen = tomli_w.dumps(generated)

print("Writing to file ...")
with open(f"{NAME}.toml", "w", encoding="utf-8") as f:
    f.write("# This file was generated by ./generate.py\n")
    f.write("# Do not edit this file manually, your changes will be overwritten\n")
    f.write("# Instead, edit config.toml and run ./generate.py\n")
    f.write("# Or push to the repo and wait for the GitHub Action to run\n")
    f.write("\n")

    f.write(gen)

    print("Done!")
    
    
BASE_README = """# {name} repo ({maintainer})

{description}

Preset     | Maintainer
-----------|---------------------------------------------------
{presets}

# Contributing

{contributing}

{additional}

---

This README is automaticly generated by `generate.py`. Do not edit this file manually, your changes will be overwritten. Instead, edit `config.toml` and run `generate.py`. Or push to the repo and wait for the GitHub Action to run.

"""

with open("README.md", "w", encoding="utf-8") as f:
    print("Updating README.md ...")
    f.write(BASE_README.format(name=config["name"], contributing=config["contributing"], maintainer=config["maintainer"], additional=config["additional"], description=config["description"], presets="\n".join(f"{preset['name']} | {preset['maintainer']}" for preset in presets.values())))
    print("Done!")
